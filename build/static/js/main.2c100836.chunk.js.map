{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","distance","lastSubmittedDistance","showResults","results","type","distanceQuotient","timeQuotient","averageSpeed","journeyRisk","risk","handleUpdateDistance","bind","handleSubmitDistanceOnEnter","handleSubmitDistance","updateResults","event","this","setState","target","value","e","key","console","log","refs","Results","forEach","result","toFixed","sort","a","b","className","min","onChange","onKeyDown","onClick","ref","align","border","map","comparedResult","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,kJC+K5BC,G,8BAvKb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,EACVC,sBAAuB,EACvBC,aAAa,EACbC,QAAS,CACP,CACEC,KAAM,MACNC,iBAAkB,IAClBC,aAAc,IACdC,aAAc,GACdC,YAAa,OACbC,KAAM,GAER,CACEL,KAAM,WACNC,iBAAkB,IAClBC,aAAc,KACdC,aAAc,IACdC,YAAa,OACbC,KAAM,GAER,CACEL,KAAM,MACNC,iBAAkB,GAClBC,aAAc,KACdC,aAAc,GACdC,YAAa,OACbC,KAAM,GAER,CACEL,KAAM,QACNC,iBAAkB,GAClBC,aAAc,GACdC,aAAc,GACdC,YAAa,KACbC,KAAM,KAKZ,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,4BAA8B,EAAKA,4BAA4BD,KAAjC,gBACnC,EAAKE,qBAAuB,EAAKA,qBAAqBF,KAA1B,gBAC5B,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBA7CJ,E,kFAgDEI,GACnBC,KAAKC,SAAS,CAACjB,SAAUe,EAAMG,OAAOC,U,kDAGZC,GACZ,UAAVA,EAAEC,KACJL,KAAKH,yB,6CAKHG,KAAKjB,MAAMC,SAAW,IAI1BgB,KAAKF,cAAcE,KAAKjB,MAAMC,UAE9BsB,QAAQC,IAAIP,KAAKQ,KAAKC,SAEtBT,KAAKC,SAAS,CACZf,aAAa,EACbD,sBAAuBe,KAAKjB,MAAMC,c,oCAIxBA,GACZ,IAAIG,EAAUa,KAAKjB,MAAMI,QAEzBA,EAAQuB,SAAQ,SAACC,GACfA,EAAOlB,MACHkB,EAAOtB,iBAAmBL,EAAW,IACpC2B,EAAOrB,cAAgBN,EAAW2B,EAAOpB,cAAgB,IAC1DoB,EAAOnB,aAAaoB,QAAQ,MAGlCzB,EAAUA,EAAQ0B,MAAK,SAACC,EAAGC,GACzB,OAAOD,EAAErB,KAAOsB,EAAEtB,QAGpBO,KAAKC,SAAS,CAACd,QAASA,M,+BAGhB,IAAD,OACP,OACE,yBAAK6B,UAAU,OACb,iDACA,iGACA,6BACA,+BAAO,+EAAmE,6BAC1E,2BAAO5B,KAAM,SAAU6B,IAAK,EAAGd,MAAOH,KAAKjB,MAAMC,SAAUkC,SAAUlB,KAAKN,qBAAsByB,UAAWnB,KAAKJ,8BALlH,MAKoJ,6BALpJ,IAK0J,6BACxJ,4BAAQR,KAAM,SAAUgC,QAASpB,KAAKH,sBAAtC,gBANF,IAMoF,6BANpF,IAM0F,6BAGtFG,KAAKjB,MAAMG,aACb,yBAAK8B,UAAU,UAAUK,IAAI,WAC3B,wEAC4C,gCAASrB,KAAKjB,MAAME,sBAApB,MAD5C,sBACoH,4BAAQ+B,UAAW,SAAUhB,KAAKjB,MAAMI,QAAQ,GAAGC,MADvK,KACuL,6BADvL,UAEUY,KAAKjB,MAAMI,QAAQ,GAAGM,KAAOO,KAAKjB,MAAMI,QAAQ,GAAGM,MAAMmB,QAAQ,GAF3E,yBAEoG,4BAAQI,UAAW,UAAWhB,KAAKjB,MAAMI,QAAQ,GAAGC,MAFxJ,KAEwK,6BAFxK,QAGQY,KAAKjB,MAAMI,QAAQ,GAAGM,KAAOO,KAAKjB,MAAMI,QAAQ,GAAGM,MAAMmB,QAAQ,GAHzE,yBAGkG,4BAAQI,UAAW,UAAWhB,KAAKjB,MAAMI,QAAQ,GAAGC,MAHtJ,KAGsK,6BAHtK,aAIU,4BAAQ4B,UAAW,OAAQhB,KAAKjB,MAAMI,QAAQ,GAAGC,MAJ3D,mEAI0IY,KAAKjB,MAAMI,QAAQ,GAAGM,KAAOO,KAAKjB,MAAMI,QAAQ,GAAGM,MAAMmB,QAAQ,GAJ3M,kCAI6O,4BAAQI,UAAW,SAAUhB,KAAKjB,MAAMI,QAAQ,GAAGC,MAJhS,KAOA,2BAAOkC,MAAO,SAAUC,OAAQ,OAC5B,4BACE,oCACA,8DAEEvB,KAAKjB,MAAMI,QAAQqC,KAAI,SAACb,GACtB,OACE,2CAAiBA,EAAOvB,KAAxB,YAONY,KAAKjB,MAAMI,QAAQqC,KAAI,SAACb,GACtB,OACE,4BACE,4BAAKA,EAAOvB,MACZ,4BAAKuB,EAAOlB,KAAZ,KAGE,EAAKV,MAAMI,QAAQqC,KAAI,SAACC,GACtB,OAAIA,IAAmBd,EACb,iCAGN,iCAAOc,EAAehC,KAAOkB,EAAOlB,MAAMmB,QAAQ,GAAlD,yB,GA1IZc,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2c100836.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      distance: 0,\n      lastSubmittedDistance: 0,\n      showResults: false,\n      results: [\n        {\n          type: 'Car',\n          distanceQuotient: 3.1,\n          timeQuotient: 130,\n          averageSpeed: 90,\n          journeyRisk: 4.3 / 1e+9,\n          risk: 0\n        },\n        {\n          type: 'Airplane',\n          distanceQuotient: 0.05,\n          timeQuotient: 30.8,\n          averageSpeed: 500,\n          journeyRisk: 117 / 1e+9,\n          risk: 0\n        },\n        {\n          type: 'Bus',\n          distanceQuotient: 0.4,\n          timeQuotient: 11.1,\n          averageSpeed: 70,\n          journeyRisk: 4.3 / 1e+9,\n          risk: 0\n        },\n        {\n          type: 'Train',\n          distanceQuotient: 0.6,\n          timeQuotient: 30,\n          averageSpeed: 60,\n          journeyRisk: 20 / 1e+9,\n          risk: 0\n        }\n      ]\n    };\n\n    this.handleUpdateDistance = this.handleUpdateDistance.bind(this);\n    this.handleSubmitDistanceOnEnter = this.handleSubmitDistanceOnEnter.bind(this);\n    this.handleSubmitDistance = this.handleSubmitDistance.bind(this);\n    this.updateResults = this.updateResults.bind(this);\n  }\n\n  handleUpdateDistance(event) {\n    this.setState({distance: event.target.value});\n  }\n\n  handleSubmitDistanceOnEnter(e) {\n    if (e.key === 'Enter') {\n      this.handleSubmitDistance();\n    }\n  }\n\n  handleSubmitDistance() {\n    if (this.state.distance < 1) {\n      return\n    }\n\n    this.updateResults(this.state.distance);\n\n    console.log(this.refs.Results);\n\n    this.setState({\n      showResults: true,\n      lastSubmittedDistance: this.state.distance\n    });\n  }\n\n  updateResults(distance) {\n    let results = this.state.results;\n\n    results.forEach((result) => {\n      result.risk =\n        ((result.distanceQuotient * distance / 1e+9)\n        + (result.timeQuotient * (distance / result.averageSpeed) / 1e+9)\n        + result.journeyRisk).toFixed(9);\n    });\n\n    results = results.sort((a, b) => {\n      return a.risk - b.risk\n    });\n\n    this.setState({results: results});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Safest-Trip.com </h1>\n        <header> Choose the safest transportation method for your dream trip </header>\n        <br/>\n        <label><strong> What is the distance you want to travel? </strong></label><br/>\n        <input type={\"number\"} min={1} value={this.state.distance} onChange={this.handleUpdateDistance} onKeyDown={this.handleSubmitDistanceOnEnter} /> km<br/> <br/>\n        <button type={\"submit\"} onClick={this.handleSubmitDistance}>  Calculate </button> <br/> <br/>\n\n        {\n          this.state.showResults &&\n        <div className=\"results\" ref=\"Results\">\n          <p>\n            The safest transportation method for your <strong>{this.state.lastSubmittedDistance}km</strong> trip would be the <strong className={\"green\"}>{this.state.results[0].type}</strong>. <br/>\n            It is {(this.state.results[1].risk / this.state.results[0].risk).toFixed(2)} times safer than the <strong className={\"yellow\"}>{this.state.results[1].type}</strong>, <br/>\n            and {(this.state.results[2].risk / this.state.results[0].risk).toFixed(2)} times safer than the <strong className={\"yellow\"}>{this.state.results[2].type}</strong>. <br/>\n          While the <strong className={\"red\"}>{this.state.results[3].type}</strong> is the most dangerous transportation for this trip, making it {(this.state.results[3].risk / this.state.results[0].risk).toFixed(2)} times more dangerous than the <strong className={\"green\"}>{this.state.results[0].type}</strong>.\n          </p>\n\n          <table align={\"center\"} border={'1px'}>\n              <tr>\n                <th>Type</th>\n                <th> Probability of a fatal crash </th>\n                {\n                  this.state.results.map((result) => {\n                    return (\n                      <th> Safer than {result.type} by </th>\n                    )\n                  })\n                }\n              </tr>\n\n              {\n                this.state.results.map((result) => {\n                  return (\n                    <tr>\n                      <td>{result.type}</td>\n                      <td>{result.risk}%</td>\n\n                      {\n                        this.state.results.map((comparedResult) => {\n                          if (comparedResult === result) {\n                            return (<td>X</td>)\n                          } else {\n                            return (\n                              <td> {(comparedResult.risk / result.risk).toFixed(2)} times </td>\n                            )\n                          }\n                        })\n                      }\n                    </tr>\n                  )\n                })\n              }\n            </table>\n        </div>\n        }\n\n\n        {/*<div className={'container'}>*/}\n        {/*  {*/}\n        {/*    this.state.results.map((result) => {*/}\n        {/*      return (*/}\n        {/*        <div className={'row'}>*/}\n        {/*          <div className={'col'}>{result.type}</div>*/}\n        {/*          <div className={'col'}>{result.risk}%</div>*/}\n        {/*        </div>*/}\n        {/*      )*/}\n        {/*    })*/}\n        {/*  }*/}\n        {/*</div>*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}